# load the njs module to allow us to use js_* directives
load_module modules/ngx_http_js_module.so;

events {}

http {
  # Ensure that all responses are returned with the
  # correct MIME type
  default_type application/json;

  # njs script for mock server
  js_import poetry from mock_server/precious-poetry.mjs;

  # Main logic njs script
  js_import weather_auth from weather-auth.mjs;


  server {
    # Any errors will automatically be returned
    # with a consistant JSON response
    include error_responses.json.conf;

    # The server will be reachable on port 4000
    listen 4000;

    location / {
      # Reference: https://nginx.org/en/docs/http/ngx_http_auth_request_module.html
      auth_request     /auth;

      # Use the `preciousWeatherPoetry` function provided my the `poetry` alias
      # defined in the `js_import` directive above to handle the request.
      js_content poetry.preciousWeatherPoetry;
    }

    location /auth {
      # Ensure that no one from outside can call this endpoint its own.
      # Reference: https://nginx.org/en/docs/http/ngx_http_core_module.html#internal
      internal;

      # Configures name servers used to resolve names of
      # upstream servers into addresses.
      # Using CloudFlare DNS
      # Reference: https://nginx.org/en/docs/http/ngx_http_core_module.html#resolver
      resolver 1.1.1.1;

      # This is where the main code for this example lives.
      js_content weather_auth.doAuth;
    }
  }
}
